---
controller:
  name: controller
  image:
    registry: k8s.gcr.io
    image: ingress-nginx/controller
    tag: "v1.1.0"
    digest:
    pullPolicy: IfNotPresent
    runAsUser: 101
    allowPrivilegeEscalation: true

  containerName: controller

  containerPort:
    http: 80
    https: 443

  dnsPolicy: ClusterFirst

  reportNodeInternalIp: false

  watchIngressWithoutClass: false

  ingressClassByName: false

  allowSnippetAnnotations: true

  hostNetwork: false

  hostPort:
    enabled: false
    ports:
      http: 80
      https: 443

  electionID: ingress-controller-leader

  ingressClassResource:
    name: nginx
    enabled: true
    default: false
    controllerValue: "k8s.io/ingress-nginx"

  publishService:
    enabled: true
    pathOverride: ""

  scope:
    enabled: false
    namespace: ""
    namespaceSelector: ""

  kind: DaemonSet
  minReadySeconds: 0

  terminationGracePeriodSeconds: 300

  nodeSelector:
    kubernetes.io/os: linux

  livenessProbe:
    httpGet:
      path: "/healthz"
      port: 10254
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 5

  readinessProbe:
    httpGet:
      path: "/healthz"
      port: 10254
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3

  healthCheckPath: "/healthz"

  replicaCount: 1

  minAvailable: 1

  resources:
    requests:
      cpu: 100m
      memory: 90Mi

  keda:
    apiVersion: "keda.sh/v1alpha1"
    enabled: false
    minReplicas: 1
    maxReplicas: 11
    pollingInterval: 30
    cooldownPeriod: 300
    restoreToOriginalReplicaCount: false
    scaledObject:
      annotations: {}
    triggers: []
    behavior: {}

  enableMimalloc: true

  service:
    enabled: true
    appProtocol: true
    enableHttp: true
    enableHttps: true
    externalTrafficPolicy: "Local"
    ipFamilyPolicy: "SingleStack"
    ipFamilies:
      - IPv4
    ports:
      http: 80
      https: 443
    targetPorts:
      http: http
      https: https
    type: LoadBalancer
    external:
      enabled: true
    internal:
      enabled: false
      annotations: {}
      loadBalancerSourceRanges: []


  admissionWebhooks:
    enabled: true
    failurePolicy: Fail
    port: 8443
    certificate: "/usr/local/certificates/cert"
    key: "/usr/local/certificates/key"

    service:
      servicePort: 443
      type: ClusterIP

    patch:
      enabled: true
      image:
        registry: k8s.gcr.io
        image: ingress-nginx/kube-webhook-certgen
        tag: v1.1.1
        digest:
        pullPolicy: IfNotPresent
      priorityClassName: ""
      podAnnotations: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations: []
      labels: {}
      runAsUser: 2000

  metrics:
    port: 10254
    enabled: true
    service:
      annotations:
        meta.helm.sh/release-name: monitoring
        meta.helm.sh/release-namespace: monitoring
      loadBalancerSourceRanges: []
      servicePort: 10254
      type: ClusterIP

    prometheusRule:
      enabled: true
      additionalLabels: {}
      rules:
        - alert: NGINXConfigFailed
          expr: count(nginx_ingress_controller_config_last_reload_successful == 0) > 0
          for: 1s
          labels:
            severity: critical
          annotations:
            description: bad ingress config - nginx config test failed
            summary: uninstall the latest ingress changes to allow config reloads to resume
        - alert: NGINXCertificateExpiry
          expr: (avg(nginx_ingress_controller_ssl_expire_time_seconds) by (host) - time()) < 604800
          for: 1s
          labels:
            severity: critical
          annotations:
            description: ssl certificate(s) will expire in less then a week
            summary: renew expiring certificates to avoid downtime
        - alert: NGINXTooMany500s
          expr: 100 * ( sum( nginx_ingress_controller_requests{status=~"5.+"} ) / sum(nginx_ingress_controller_requests) ) > 5
          for: 1m
          labels:
            severity: warning
          annotations:
            description: Too many 5XXs
            summary: More than 5% of all requests returned 5XX, this requires your attention
        - alert: NGINXTooMany400s
          expr: 100 * ( sum( nginx_ingress_controller_requests{status=~"4.+"} ) / sum(nginx_ingress_controller_requests) ) > 5
          for: 1m
          labels:
            severity: warning
          annotations:
            description: Too many 4XXs
            summary: More than 5% of all requests returned 4XX, this requires your attention

  lifecycle:
    preStop:
      exec:
        command:
          - /wait-shutdown

revisionHistoryLimit: 10

defaultBackend:
  enabled: true
  name: defaultbackend
  image:
    registry: k8s.gcr.io
    image: defaultbackend-amd64
    tag: "1.5"
    pullPolicy: IfNotPresent
    runAsUser: 65534
    runAsNonRoot: true
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false

  serviceAccount:
    create: true
    name: ""
    automountServiceAccountToken: true

  port: 8080

  livenessProbe:
    failureThreshold: 3
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  readinessProbe:
    failureThreshold: 6
    initialDelaySeconds: 0
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 5

  replicaCount: 1

  minAvailable: 1

  service:
    servicePort: 80
    type: ClusterIP

rbac:
  create: true
  scope: false

podSecurityPolicy:
  enabled: false

serviceAccount:
  create: true
  name: ""
  automountServiceAccountToken: true
